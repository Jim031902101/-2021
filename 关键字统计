#include<ctype.h>
#include<string.h>
#include<stack> 
#include<iostream>
#include<fstream>
#include<cassert>
using namespace std;
int n = 0, level;
char a[100000];
int casenum[100], casen = 0;
struct key   //构建结构体数组,关键字按顺序排列
{
    const char* word;
    int count;
} keywords[] = {
"auto",0,"break",0,"case",0,"char",0,"const",0,"continue",0,"default",0,"do",0,
"double",0,"else",0,"enum",0,"extern",0,"float",0,"for",0,"goto",0,"if",0,
"int",0,"long",0,"register",0,"return",0,"short",0,"signed",0,"sizeof",0,"static",0,
"struct",0,"switch",0,"typedef",0,"union",0,"unsined",0,"void",0,"volatile",0,"while",0,
};
//关键字的个数等于数组的长度除以单个元素的长度
#define NKEYS (sizeof keywords / sizeof(struct key))
int j = 0;
int getword(char* word, int lim)
{
    char* w = word;
    for (j; j < n; j++)
    {
        if (isspace(a[j]))
            continue;
        else break;
    }//跳过空白符
    *w++ = a[j];
    if (!isalpha(a[j])) //不是字母
    {
        *w = '\0';
        return a[j++];
    }j++;
    for (; --lim > 0; w++)
    {
        if (!isalnum(*w = a[j++])) //输入不是字母或数字时，该单词结束
        {
            j--;
            break;
        }
    }
    *w = '\0'; //字符串结束符'\0'
    return word[0]; //返回值是单词的第一个字符
}
int binsearch(char* word, struct key words[], int n)
{
    int cond;
    int low, high, mid;
    low = 0;
    high = n - 1;
    while (low <= high)
    {
        mid = (low + high) / 2;
        if ((cond = strcmp(word, words[mid].word)) < 0)
            high = mid - 1;
        else if (cond > 0)
            low = mid + 1;
        else
            return mid;
    }
    return -1;
}
void count() {
    int m;
    char word[100000];
    for (int i = 0; i < n; i++)
    {
        getword(word, 100000);
        if (isalpha(word[0])) //word的第一个单词为字母
        {
            if ((m = binsearch(word, keywords, NKEYS)) >= 0)
            {
                keywords[m].count++;//在结构体中查找成功，关键字计数加1
                if (strcmp(keywords[m].word, "case") == 0)
                    casenum[casen]++;
                if (strcmp(keywords[m].word, "switch") == 0)
                    casen++;
            }
        }
    }
    int sum = 0;
    for (int i = 0; i < NKEYS; i++)
    {
        sum += keywords[i].count;
    }
    cout << "total num:" << sum << endl;
}
void readtxt(string file)
{
    ifstream infile;
    infile.open(file.data());   //将文件对象与文件连接起来 
    assert(infile.is_open());   //假如失败,输出错误消息,并终止程序运行 
    char c;
    infile >> noskipws;
    while (!infile.eof())
    {
        infile >> c;
        a[n++] = c;
    }
    infile.close();    //关闭文件输入
    count();
    for (int i = 0; i < n; i++) {
        if (a[i] == 'i' && a[i + 1] == 'f' && a[i + 2] == '(')
            ;
    }
}
int main() {
    string s;
    cin >> s >> level;
    readtxt(s);
    return 0;
}
